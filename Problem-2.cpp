// File name:	2.cpp
// Author:		John Conder
// Date:		08/08/2012
//
// Problem: 
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#include <iostream>

void IterateFib(int& element1, int& element2)
{
	int tmp = element2;
	element2 += element1;
	element1 = tmp;
}

int SumOfEvenFibs(int const& range = 4000000)
{
	int _fib1 = 0;
	int _fib2 = 1;
	
	int sum = 0;

	// The value of _fib2 will be the "current" number in the fib sequence
	while ( _fib2 < range )
	{
		IterateFib(_fib1, _fib2);

		// Compare the second value in fib, since it starts the sequence with 1 and ends the sequence
		// with the last fib within the given range
		if ( _fib2 % 2 == 0 )
		{
			sum += _fib2;
		}
	}

	return sum;
}

int main()
{
	std::cout << "Project Euler #2:" << std::endl;
	std::cout << SumOfEvenFibs();

	std::cin.get();

	return 0;
}